' Pictionary - Graphics
' Version 1.7.2
' Copyright Â© 2017-2020 Nonki Takahashi.  The MIT License.
' 2017-05-26 13:34:41 Shapes generated by Shapes 2.21b.
' Last update 2020-05-19

SB_Workaround()
Init()

' initialize monitor shapes
Shapes_Init_Monitor()
scale = 1
angle = 0
iMin = 1
iMax = Array.GetItemCount(shape)
Shapes_Add()

' initialize caption shapes
Shapes_Init_Caption()
iMax = Array.GetItemCount(shape)
Shapes_Add()

Sub Init
  GraphicsWindow.Title = "Pictionary"
  gw = 598
  gh = 428
  GraphicsWindow.Width = gw
  GraphicsWindow.Height = gh
EndSub

Sub Shapes_Init_Caption
  ' Shapes | Initialize shapes data
  ' return shX, shY - current position of shapes
  ' return shape - array of shapes
  shX = 377 ' x offset
  shY = 358 ' y offset
  shape = ""
  shape[1] = "func=text;x=0;y=0;text=Graphics;fn=Trebuchet MS;fs=50;fb=True;pw=0;bc=Black;"
EndSub

Sub Shapes_Init_Monitor
  ' Shapes | Initialize shapes data
  ' return shX, shY - current position of shapes
  ' return shape - array of shapes
  shX = 145 ' x offset
  shY = 68 ' y offset
  shape = ""
  shape[1] = "func=rect;x=-20;y=-20;width=356;height=281;bc=#333333;pw=0;"
  shape[2] = "func=rect;x=1;y=0;width=316;height=241;bc=#ABABAB;pw=0;"
  shape[3] = "func=tri;x=0;y=0;x1=34;y1=0;x2=0;y2=35;x3=68;y3=35;angle=180;bc=#8C8C8C;pw=0;"
  shape[4] = "func=tri;x=250;y=0;x1=34;y1=0;x2=0;y2=35;x3=68;y3=35;angle=180;bc=#8C8C8C;pw=0;"
  shape[5] = "func=rect;x=34;y=0;width=249;height=36;bc=#8C8C8C;pw=0;"
  shape[6] = "func=rect;x=35;y=205;width=249;height=36;bc=#BFBFBF;pw=0;"
  shape[7] = "func=tri;x=0;y=206;x1=34;y1=0;x2=0;y2=35;x3=68;y3=35;bc=#BFBFBF;pw=0;"
  shape[8] = "func=tri;x=250;y=206;x1=34;y1=0;x2=0;y2=35;x3=68;y3=35;bc=#BFBFBF;pw=0;"
  shape[9] = "func=ell;x=35;y=19;width=249;height=36;bc=#000000;pw=0;"
  shape[10] = "func=ell;x=33;y=186;width=249;height=36;bc=#000000;pw=0;"
  shape[11] = "func=ell;x=20;y=35;width=30;height=170;bc=#000000;pw=0;"
  shape[12] = "func=ell;x=266;y=35;width=30;height=170;bc=#000000;pw=0;"
  shape[13] = "func=rect;x=35;y=36;width=247;height=168;bc=#000000;pw=0;"
  shape[14] = "func=line;x=86;y=108;x1=0;y1=0;x2=1;y2=60;pc=#00FF00;pw=1;"
  shape[15] = "func=line;x=87;y=168;x1=0;y1=2;x2=143;y2=0;pc=#00FF00;pw=1;"
  shape[16] = "func=line;x=111;y=66;x1=0;y1=0;x2=94;y2=0;pc=#00FF00;pw=1;"
  shape[17] = "func=line;x=86;y=67;x1=25;y1=0;x2=0;y2=43;pc=#00FF00;pw=1;"
  shape[18] = "func=line;x=112;y=66;x1=0;y1=0;x2=25;y2=41;pc=#00FF00;pw=1;"
  shape[19] = "func=line;x=137;y=108;x1=0;y1=0;x2=0;y2=61;pc=#00FF00;pw=1;"
  shape[20] = "func=line;x=231;y=109;x1=0;y1=0;x2=0;y2=61;pc=#00FF00;pw=1;"
  shape[21] = "func=line;x=205;y=67;x1=0;y1=0;x2=25;y2=41;pc=#00FF00;pw=1;"
  shape[22] = "func=line;x=137;y=108;x1=0;y1=0;x2=94;y2=0;pc=#00FF00;pw=1;"
EndSub

Sub SB_RotateWorkaround
  ' Small Basic | Rotate workaround for Silverlight
  ' param shp - current shape
  ' param x, y - original coordinate
  ' param alpha - angle [radian]
  ' returns x, y - workaround coordinate
  If shp["func"] = "tri" Then
    x1 = -Math.Floor(shp["x3"] / 2)
    y1 = -Math.Floor(shp["y3"] / 2)
  ElseIf shp["func"] = "line" Then
    x1 = -Math.Floor(Math.Abs(shp["x1"] - shp["x2"]) / 2)
    y1 = -Math.Floor(Math.Abs(shp["y1"] - shp["y2"]) / 2)
  EndIf
  ox = x - x1
  oy = y - y1
  x = x1 * Math.Cos(alpha) - y1 * Math.Sin(alpha) + ox
  y = x1 * Math.Sin(alpha) + y1 * Math.Cos(alpha) + oy
EndSub

Sub SB_Workaround
  ' Small Basic | Workaround for Silverlight
  ' returns silverlight - "True" if in remote
  color = GraphicsWindow.GetPixel(0, 0)
  If Text.GetLength(color) > 7 Then
    silverlight = "True"
    msWait = 300
  Else
    silverlight = "False"
  EndIf
EndSub

Sub Shapes_Add
  ' Shapes | add shapes as shapes data
  ' param iMin, iMax - shape indices to add
  ' param shape - array of shapes
  ' param scale - 1 if same scale
  ' return shWidth, shHeight - total size of shapes
  ' return shAngle - current angle of shapes
  Stack.PushValue("local", i)
  Stack.PushValue("local", x)
  Stack.PushValue("local", y)
  Shapes_CalcWidthAndHeight()
  s = scale
  For i = iMin To iMax
    shp = shape[i]
    GraphicsWindow.PenWidth = shp["pw"] * s
    If shp["pw"] > 0 Then
      GraphicsWindow.PenColor = shp["pc"]
    EndIf
    If Text.IsSubText("rect|ell|tri|text", shp["func"]) Then
      GraphicsWindow.BrushColor = shp["bc"]
    EndIf
    If shp["func"] = "rect" Then
      shp["obj"] = Shapes.AddRectangle(shp["width"] * s, shp["height"] * s)
    ElseIf shp["func"] = "ell" Then
      shp["obj"] = Shapes.AddEllipse(shp["width"] * s, shp["height"] * s)
    ElseIf shp["func"] = "tri" Then
      shp["obj"] = Shapes.AddTriangle(shp["x1"] * s, shp["y1"] * s, shp["x2"] * s, shp["y2"] * s, shp["x3"] * s, shp["y3"] * s)
    ElseIf shp["func"] = "line" Then
      shp["obj"] = Shapes.AddLine(shp["x1"] * s, shp["y1"] * s, shp["x2"] * s, shp["y2"] * s)
    ElseIf shp["func"] = "text" Then
      If silverlight Then
        fs = Math.Floor(shp["fs"] * 0.9)
      Else
        fs = shp["fs"]
      EndIf
      GraphicsWindow.FontSize = fs * s
      GraphicsWindow.FontName = shp["fn"]
      shp["obj"] = Shapes.AddText(shp["text"])
    EndIf
    x = shp["x"]
    y = shp["y"]
    shp["rx"] = x
    shp["ry"] = y
    If silverlight And Text.IsSubText("tri|line", shp["func"]) Then
      alpha = Math.GetRadians(shp["angle"])
      SB_RotateWorkaround()
      shp["wx"] = x
      shp["wy"] = y
    EndIf
    Shapes.Move(shp["obj"], shX + x * s, shY + y * s)
    If Text.IsSubText("rect|ell|tri|text", shp["func"]) And (shp["angle"] <> 0) And (shp["angle"] <> "") Then
      Shapes.Rotate(shp["obj"], shp["angle"])
    EndIf
    shape[i] = shp
  EndFor
  shAngle = 0
  y = Stack.PopValue("local")
  x = Stack.PopValue("local")
  i = Stack.PopValue("local")
EndSub

Sub Shapes_CalcWidthAndHeight
  ' Shapes | Calculate total width and height of shapes
  ' param iMin, iMax - shape indices to add
  ' return shWidth, shHeight - total size of shapes
  For i = iMin To iMax
    shp = shape[i]
    If shp["func"] = "tri" Or shp["func"] = "line" Then
      xmin = shp["x1"]
      xmax = shp["x1"]
      ymin = shp["y1"]
      ymax = shp["y1"]
      If shp["x2"] < xmin Then
        xmin = shp["x2"]
      EndIf
      If xmax < shp["x2"] Then
        xmax = shp["x2"]
      EndIf
      If shp["y2"] < ymin Then
        ymin = shp["y2"]
      EndIf
      If ymax < shp["y2"] Then
        ymax = shp["y2"]
      EndIf
      If shp["func"] = "tri" Then
        If shp["x3"] < xmin Then
          xmin = shp["x3"]
        EndIf
        If xmax < shp["x3"] Then
          xmax = shp["x3"]
        EndIf
        If shp["y3"] < ymin Then
          ymin = shp["y3"]
        EndIf
        If ymax < shp["y3"] Then
          ymax = shp["y3"]
        EndIf
      EndIf
      shp["width"] = xmax - xmin
      shp["height"] = ymax - ymin
    EndIf
    If i = 1 Then
      shWidth = shp["x"] + shp["width"]
      shHeight = shp["y"] + shp["height"]
    Else
      If shWidth < shp["x"] + shp["width"] Then
        shWidth = shp["x"] + shp["width"]
      EndIf
      If shHeight < shp["y"] + shp["height"] Then
        shHeight = shp["y"] + shp["height"]
      EndIf
    EndIf
    shape[i] = shp
  EndFor
EndSub
