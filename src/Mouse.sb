' Pictionary - Mouse
' Version 1.7.1
' Copyright Â© 2017-2020  Nonki Takahashi.  The MIT License.
' Last update 2020-05-18

SB_Workaround()
Init()

' initialize mouse shapes
Shapes_Init_Mouse()
name = "Mouse"
Group_Add()

' initialize caption shapes
Shapes_Init_Caption()
name = "Caption"
Group_Add()

Sub Init
  GraphicsWindow.Title = "Pictionary"
  gw = 598
  gh = 428
  GraphicsWindow.Width = gw
  GraphicsWindow.Height = gh
EndSub

Sub Group_Add
  ' Group | add shapes to a group
  ' param name - group name
  ' param shX, shY, origin of shape array
  ' param shape[] - shape array
  ' param nGroup - number of group
  ' return nGroup - updated number of group
  ' return group - group array
  Stack.PushValue("local", i)
  Stack.PushValue("local", x)
  Stack.PushValue("local", y)
  nGroup = nGroup + 1
  grp = ""
  grp["name"] = name
  grp["x"] = shX
  grp["y"] = shY
  grp["angle"] = 0
  grp["dir"] = 1
  Shapes_CalcWidthAndHeight()
  grp["width"] = shWidth
  grp["height"] = shHeight
  grp["cx"] = shWidth / 2
  grp["cy"] = shHeight / 2
  s = 1
  grp["scale"] = s
  For i = 1 To Array.GetItemCount(shape)
    shp = shape[i]
    GraphicsWindow.PenWidth = shp["pw"] * s
    If shp["pw"] > 0 Then
      GraphicsWindow.PenColor = shp["pc"]
    EndIf
    If Text.IsSubText("rect|ell|tri|text|btn", shp["func"]) Then
      GraphicsWindow.BrushColor = shp["bc"]
    EndIf
    If Text.IsSubText("text|btn", shp["func"]) Then
      If silverlight Then
        fs = Math.Floor(shp["fs"] * 0.9)
      Else
        fs = shp["fs"]
      EndIf
      GraphicsWindow.FontSize = fs * s
      GraphicsWindow.FontName = shp["fn"]
      If shp["fb"] = "False" Then
        GraphicsWindow.FontBold = "False"
      Else
        GraphicsWindow.FontBold = "True"
      EndIf
    EndIf
    If shp["func"] = "rect" Then
      shp["obj"] = Shapes.AddRectangle(shp["width"] * s, shp["height"] * s)
    ElseIf shp["func"] = "ell" Then
      shp["obj"] = Shapes.AddEllipse(shp["width"] * s, shp["height"] * s)
    ElseIf shp["func"] = "tri" Then
      shp["obj"] = Shapes.AddTriangle(shp["x1"] * s, shp["y1"] * s, shp["x2"] * s, shp["y2"] * s, shp["x3"] * s, shp["y3"] * s)
    ElseIf shp["func"] = "line" Then
      shp["obj"] = Shapes.AddLine(shp["x1"] * s, shp["y1"] * s, shp["x2"] * s, shp["y2"] * s)
    ElseIf shp["func"] = "text" Then
      shp["obj"] = Shapes.AddText(shp["text"])
    EndIf
    x = shp["x"]
    y = shp["y"]
    shp["rx"] = x
    shp["ry"] = y
    If sbd And (shp["func"] = "line") Then
      shp["wx"] = x
      shp["wy"] = y
    ElseIf silverlight And Text.IsSubText("tri|line", shp["func"]) Then
      _alpha = Math.GetRadians(shp["angle"])
      SB_RotateWorkaround()
      shp["wx"] = x
      shp["wy"] = y
    EndIf
    If shp["func"] = "btn" Then
      shp["obj"] = Controls.AddButton(shp["caption"], shX + x * s, shY + y * s)
    Else
      Shapes.Move(shp["obj"], shX + x * s, shY + y * s)
    EndIf
    If Text.IsSubText("rect|ell|tri|text", shp["func"]) And (shp["angle"] <> 0) And (shp["angle"] <> "") Then
      Shapes.Rotate(shp["obj"], shp["angle"])
    EndIf
    shape[i] = shp
  EndFor
  grp["shape"] = shape
  group[nGroup] = grp
  y = Stack.PopValue("local")
  x = Stack.PopValue("local")
  i = Stack.PopValue("local")
EndSub

Sub SB_RotateWorkaround
  ' Small Basic | rotate workaround for Silverlight
  ' param shp - current shape
  ' param x, y - original coordinate
  ' param _alpha - angle [radian]
  ' returns x, y - workaround coordinate
  If shp["func"] = "tri" Then
    x1 = -Math.Floor(shp["x3"] / 2)
    y1 = -Math.Floor(shp["y3"] / 2)
  ElseIf shp["func"] = "line" Then
    x1 = -Math.Floor(Math.Abs(shp["x1"] - shp["x2"]) / 2)
    y1 = -Math.Floor(Math.Abs(shp["y1"] - shp["y2"]) / 2)
  EndIf
  ox = x - x1
  oy = y - y1
  x = x1 * Math.Cos(_alpha) - y1 * Math.Sin(_alpha) + ox
  y = x1 * Math.Sin(_alpha) + y1 * Math.Cos(_alpha) + oy
EndSub

Sub SB_Workaround
  ' Small Basic | workaround for Silverlight / SBD
  ' return silverlight - "True" if in remote
  ' return sbd - "True" if Small Basic Desktop
  color = GraphicsWindow.GetPixel(0, 0)
  sbd = "False"
  If Text.GetLength(color) > 7 Then
    silverlight = "True"
    msWait = 300
  Else
    silverlight = "False"
    gw = GraphicsWindow.Width
    gh = GraphicsWindow.Height
    If (gw = 624) And (gh = 441) Then
      sbd = "True"
    EndIf
  EndIf
EndSub

Sub Shapes_CalcWidthAndHeight
  ' Shapes | calculate total width and height of shapes
  ' param shape[] - shape array
  ' return shWidth, shHeight - total size of shapes
  For i = 1 To Array.GetItemCount(shape)
    shp = shape[i]
    If shp["func"] = "tri" Or shp["func"] = "line" Then
      xmin = shp["x1"]
      xmax = shp["x1"]
      ymin = shp["y1"]
      ymax = shp["y1"]
      If shp["x2"] < xmin Then
        xmin = shp["x2"]
      EndIf
      If xmax < shp["x2"] Then
        xmax = shp["x2"]
      EndIf
      If shp["y2"] < ymin Then
        ymin = shp["y2"]
      EndIf
      If ymax < shp["y2"] Then
        ymax = shp["y2"]
      EndIf
      If shp["func"] = "tri" Then
        If shp["x3"] < xmin Then
          xmin = shp["x3"]
        EndIf
        If xmax < shp["x3"] Then
          xmax = shp["x3"]
        EndIf
        If shp["y3"] < ymin Then
          ymin = shp["y3"]
        EndIf
        If ymax < shp["y3"] Then
          ymax = shp["y3"]
        EndIf
      EndIf
      shp["width"] = xmax - xmin
      shp["height"] = ymax - ymin
    EndIf
    If i = 1 Then
      shWidth = shp["x"] + shp["width"]
      shHeight = shp["y"] + shp["height"]
    Else
      If shWidth < shp["x"] + shp["width"] Then
        shWidth = shp["x"] + shp["width"]
      EndIf
      If shHeight < shp["y"] + shp["height"] Then
        shHeight = shp["y"] + shp["height"]
      EndIf
    EndIf
    shape[i] = shp
  EndFor
EndSub

Sub Shapes_Init_Caption
  ' Shapes | Initialize shapes data
  ' return shX, shY - current position of shapes
  ' return shape - array of shapes
  shX = 432 ' x offset
  shY = 358 ' y offset
  shape = ""
  shape[1] = "func=text;x=0;y=0;text=Mouse;fn=Trebuchet MS;fs=50;fb=True;pw=0;bc=Black;"
EndSub

Sub Shapes_Init_Mouse
  ' Shapes | Initialize shapes data
  ' return shX, shY - current position of shapes
  ' return shape - array of shapes
  shX = 220 ' x offset
  shY = 0   ' y offset
  shape = ""
  shape[1] = "pw=6;pc=Gray;func=line;x1=0;y1=0;x2=0;y2=107;x=0;y=0;"
  shape[2] = "pw=0;bc=Gray;func=ell;width=6;height=6;x=-3;y=104;"
  shape[3] = "pw=0;bc=Gray;func=ell;width=6;height=6;x=-2.93;y=105.74;"
  shape[4] = "pw=0;bc=Gray;func=ell;width=6;height=6;x=-2.7;y=107.47;"
  shape[5] = "pw=0;bc=Gray;func=ell;width=6;height=6;x=-2.32;y=109.17;"
  shape[6] = "pw=0;bc=Gray;func=ell;width=6;height=6;x=-1.8;y=110.84;"
  shape[7] = "pw=0;bc=Gray;func=ell;width=6;height=6;x=-1.13;y=112.45;"
  shape[8] = "pw=0;bc=Gray;func=ell;width=6;height=6;x=-0.33;y=114;"
  shape[9] = "pw=0;bc=Gray;func=ell;width=6;height=6;x=0.61;y=115.47;"
  shape[10] = "pw=0;bc=Gray;func=ell;width=6;height=6;x=1.67;y=116.85;"
  shape[11] = "pw=0;bc=Gray;func=ell;width=6;height=6;x=2.85;y=118.14;"
  shape[12] = "pw=0;bc=Gray;func=ell;width=6;height=6;x=4.14;y=119.32;"
  shape[13] = "pw=0;bc=Gray;func=ell;width=6;height=6;x=5.52;y=120.38;"
  shape[14] = "pw=0;bc=Gray;func=ell;width=6;height=6;x=6.99;y=121.32;"
  shape[15] = "pw=0;bc=Gray;func=ell;width=6;height=6;x=8.54;y=122.12;"
  shape[16] = "pw=0;bc=Gray;func=ell;width=6;height=6;x=10.15;y=122.79;"
  shape[17] = "pw=0;bc=Gray;func=ell;width=6;height=6;x=11.82;y=123.31;"
  shape[18] = "pw=0;bc=Gray;func=ell;width=6;height=6;x=13.52;y=123.69;"
  shape[19] = "pw=0;bc=Gray;func=ell;width=6;height=6;x=15.25;y=123.92;"
  shape[20] = "pw=0;bc=Gray;func=ell;width=6;height=6;x=16.99;y=124;"
  shape[21] = "pw=0;bc=Gray;func=ell;width=6;height=6;x=18.74;y=123.92;"
  shape[22] = "pw=0;bc=Gray;func=ell;width=6;height=6;x=20.47;y=123.69;"
  shape[23] = "pw=0;bc=Gray;func=ell;width=6;height=6;x=22.17;y=123.31;"
  shape[24] = "pw=0;bc=Gray;func=ell;width=6;height=6;x=23.84;y=122.79;"
  shape[25] = "pw=0;bc=Gray;func=ell;width=6;height=6;x=25.45;y=122.12;"
  shape[26] = "pw=0;bc=Gray;func=ell;width=6;height=6;x=26.99;y=121.32;"
  shape[27] = "pw=0;bc=Gray;func=ell;width=6;height=6;x=28.47;y=120.38;"
  shape[28] = "pw=0;bc=Gray;func=ell;width=6;height=6;x=29.85;y=119.32;"
  shape[29] = "pw=0;bc=Gray;func=ell;width=6;height=6;x=31.14;y=118.14;"
  shape[30] = "pw=0;bc=Gray;func=ell;width=6;height=6;x=32.32;y=116.85;"
  shape[31] = "pw=0;bc=Gray;func=ell;width=6;height=6;x=33.38;y=115.47;"
  shape[32] = "pw=0;bc=Gray;func=ell;width=6;height=6;x=34.32;y=114;"
  shape[33] = "pw=0;bc=Gray;func=ell;width=6;height=6;x=35.12;y=112.45;"
  shape[34] = "pw=0;bc=Gray;func=ell;width=6;height=6;x=35.79;y=110.84;"
  shape[35] = "pw=0;bc=Gray;func=ell;width=6;height=6;x=36.31;y=109.17;"
  shape[36] = "pw=0;bc=Gray;func=ell;width=6;height=6;x=36.69;y=107.47;"
  shape[37] = "pw=0;bc=Gray;func=ell;width=6;height=6;x=36.92;y=105.74;"
  shape[38] = "pw=0;bc=Gray;func=ell;width=6;height=6;x=37;y=104;"
  shape[39] = "pw=6;pc=Gray;func=line;x1=0;y1=0;x2=0;y2=20;x=40;y=87;"
  shape[40] = "pw=0;bc=Gray;func=ell;width=6;height=6;x=37;y=84;"
  shape[41] = "pw=0;bc=Gray;func=ell;width=6;height=6;x=37.07;y=82.25;"
  shape[42] = "pw=0;bc=Gray;func=ell;width=6;height=6;x=37.3;y=80.52;"
  shape[43] = "pw=0;bc=Gray;func=ell;width=6;height=6;x=37.68;y=78.82;"
  shape[44] = "pw=0;bc=Gray;func=ell;width=6;height=6;x=38.2;y=77.15;"
  shape[45] = "pw=0;bc=Gray;func=ell;width=6;height=6;x=38.87;y=75.54;"
  shape[46] = "pw=0;bc=Gray;func=ell;width=6;height=6;x=39.67;y=74;"
  shape[47] = "pw=0;bc=Gray;func=ell;width=6;height=6;x=40.61;y=72.52;"
  shape[48] = "pw=0;bc=Gray;func=ell;width=6;height=6;x=41.67;y=71.14;"
  shape[49] = "pw=0;bc=Gray;func=ell;width=6;height=6;x=42.85;y=69.85;"
  shape[50] = "pw=0;bc=Gray;func=ell;width=6;height=6;x=44.14;y=68.67;"
  shape[51] = "pw=0;bc=Gray;func=ell;width=6;height=6;x=45.52;y=67.61;"
  shape[52] = "pw=0;bc=Gray;func=ell;width=6;height=6;x=46.99;y=66.67;"
  shape[53] = "pw=0;bc=Gray;func=ell;width=6;height=6;x=48.54;y=65.87;"
  shape[54] = "pw=0;bc=Gray;func=ell;width=6;height=6;x=50.15;y=65.2;"
  shape[55] = "pw=0;bc=Gray;func=ell;width=6;height=6;x=51.82;y=64.68;"
  shape[56] = "pw=0;bc=Gray;func=ell;width=6;height=6;x=53.52;y=64.3;"
  shape[57] = "pw=0;bc=Gray;func=ell;width=6;height=6;x=55.25;y=64.07;"
  shape[58] = "pw=0;bc=Gray;func=ell;width=6;height=6;x=56.99;y=64;"
  shape[59] = "pw=0;bc=Gray;func=ell;width=6;height=6;x=58.74;y=64.07;"
  shape[60] = "pw=0;bc=Gray;func=ell;width=6;height=6;x=60.47;y=64.3;"
  shape[61] = "pw=0;bc=Gray;func=ell;width=6;height=6;x=62.17;y=64.68;"
  shape[62] = "pw=0;bc=Gray;func=ell;width=6;height=6;x=63.84;y=65.2;"
  shape[63] = "pw=0;bc=Gray;func=ell;width=6;height=6;x=65.45;y=65.87;"
  shape[64] = "pw=0;bc=Gray;func=ell;width=6;height=6;x=67;y=66.67;"
  shape[65] = "pw=0;bc=Gray;func=ell;width=6;height=6;x=68.47;y=67.61;"
  shape[66] = "pw=0;bc=Gray;func=ell;width=6;height=6;x=69.85;y=68.67;"
  shape[67] = "pw=0;bc=Gray;func=ell;width=6;height=6;x=71.14;y=69.85;"
  shape[68] = "pw=0;bc=Gray;func=ell;width=6;height=6;x=72.32;y=71.14;"
  shape[69] = "pw=0;bc=Gray;func=ell;width=6;height=6;x=73.38;y=72.52;"
  shape[70] = "pw=0;bc=Gray;func=ell;width=6;height=6;x=74.32;y=74;"
  shape[71] = "pw=0;bc=Gray;func=ell;width=6;height=6;x=75.12;y=75.54;"
  shape[72] = "pw=0;bc=Gray;func=ell;width=6;height=6;x=75.79;y=77.15;"
  shape[73] = "pw=0;bc=Gray;func=ell;width=6;height=6;x=76.31;y=78.82;"
  shape[74] = "pw=0;bc=Gray;func=ell;width=6;height=6;x=76.69;y=80.52;"
  shape[75] = "pw=0;bc=Gray;func=ell;width=6;height=6;x=76.92;y=82.25;"
  shape[76] = "pw=0;bc=Gray;func=ell;width=6;height=6;x=77;y=84;"
  shape[77] = "pw=6;pc=Gray;func=line;x1=0;y1=0;x2=0;y2=80;x=80;y=87;"
  shape[78] = "pw=0;bc=Gray;func=rect;width=120;height=60;x=20;y=167;"
  shape[79] = "pw=0;bc=LightGray;func=rect;width=60;height=60;x=19;y=165;"
  shape[80] = "pw=0;bc=LightGray;func=rect;width=60;height=60;x=81;y=165;"
  shape[81] = "pw=0;bc=LightGray;func=ell;width=122;height=122;x=19;y=227;"
  shape[82] = "pw=0;bc=LightGray;func=rect;width=122;height=61;x=19;y=227;"
  shape[83] = "pw=2;pc=Gray;bc=#999999;func=rect;width=20;height=40;x=70;y=197;"
EndSub
  