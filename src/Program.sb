' Pictionary - Program
' Version 1.7.1
' Copyright Â© 2017-2020 Nonki Takahashi.  The MIT License.
' 2017-09-25 15:14:55 Shapes generated by Shapes 2.3b.
' Last update 2020-05-18

SB_Workaround()
Init()

' initialize program shapes
Shapes_Init_Program()
name = "Program"
Sprite_Add()

' initialize caption shapes
Shapes_Init_Caption()
name = "Caption"
Sprite_Add()

Sub Init
  GraphicsWindow.Title = "Pictionary"
  gw = 598
  gh = 428
  GraphicsWindow.Width = gw
  GraphicsWindow.Height = gh
EndSub

Sub SB_RotateWorkaround
  ' Small Basic | rotate workaround for Silverlight
  ' param shp - current shape
  ' param x, y - original coordinate
  ' param _alpha - angle [radian]
  ' returns x, y - workaround coordinate
  If shp["func"] = "tri" Then
    x1 = -Math.Floor(shp["x3"] / 2)
    y1 = -Math.Floor(shp["y3"] / 2)
  ElseIf shp["func"] = "line" Then
    x1 = -Math.Floor(Math.Abs(shp["x1"] - shp["x2"]) / 2)
    y1 = -Math.Floor(Math.Abs(shp["y1"] - shp["y2"]) / 2)
  EndIf
  ox = x - x1
  oy = y - y1
  x = x1 * Math.Cos(_alpha) - y1 * Math.Sin(_alpha) + ox
  y = x1 * Math.Sin(_alpha) + y1 * Math.Cos(_alpha) + oy
EndSub

Sub SB_Workaround
  ' Small Basic | workaround for Silverlight / SBD
  ' return silverlight - "True" if in remote
  ' return sbd - "True" if Small Basic Desktop
  color = GraphicsWindow.GetPixel(0, 0)
  sbd = "False"
  If Text.GetLength(color) > 7 Then
    silverlight = "True"
    msWait = 300
  Else
    silverlight = "False"
    _gw = GraphicsWindow.Width
    _gh = GraphicsWindow.Height
    If (_gw = 624) And (_gh = 441) Then
      sbd = "True"
    EndIf
  EndIf
EndSub

Sub Shapes_CalcWidthAndHeight
  ' Shapes | calculate total width and height of shapes
  ' param shape[] - shape array
  ' return shWidth, shHeight - total size of shapes
  For i = 1 To Array.GetItemCount(shape)
    shp = shape[i]
    If shp["func"] = "tri" Or shp["func"] = "line" Then
      xmin = shp["x1"]
      xmax = shp["x1"]
      ymin = shp["y1"]
      ymax = shp["y1"]
      If shp["x2"] < xmin Then
        xmin = shp["x2"]
      EndIf
      If xmax < shp["x2"] Then
        xmax = shp["x2"]
      EndIf
      If shp["y2"] < ymin Then
        ymin = shp["y2"]
      EndIf
      If ymax < shp["y2"] Then
        ymax = shp["y2"]
      EndIf
      If shp["func"] = "tri" Then
        If shp["x3"] < xmin Then
          xmin = shp["x3"]
        EndIf
        If xmax < shp["x3"] Then
          xmax = shp["x3"]
        EndIf
        If shp["y3"] < ymin Then
          ymin = shp["y3"]
        EndIf
        If ymax < shp["y3"] Then
          ymax = shp["y3"]
        EndIf
      EndIf
      shp["width"] = xmax - xmin
      shp["height"] = ymax - ymin
    EndIf
    If i = 1 Then
      shWidth = shp["x"] + shp["width"]
      shHeight = shp["y"] + shp["height"]
    Else
      If shWidth < shp["x"] + shp["width"] Then
        shWidth = shp["x"] + shp["width"]
      EndIf
      If shHeight < shp["y"] + shp["height"] Then
        shHeight = shp["y"] + shp["height"]
      EndIf
    EndIf
    shape[i] = shp
  EndFor
EndSub

Sub Shapes_Init_Caption
  ' Shapes | Initialize shapes data
  ' return shX, shY - current position of shapes
  ' return shape - array of shapes
  shX = 384 ' x offset
  shY = 358 ' y offset
  shape = ""
  shape[1] = "func=text;x=0;y=0;text=Program;fn=Trebuchet MS;fs=50;fb=True;pw=0;bc=Black;"
EndSub

Sub Shapes_Init_Program
  ' Shapes | Initialize shapes data
  ' return shX, shY - current position of shapes
  ' return shape - array of shapes
  shX = 260 ' x offset
  shY = 50  ' y offset
  shape = ""
  shape[1] = "func=ell;x=0;y=0;width=40;height=40;bc=#99FFFF;pw=0;"
  shape[2] = "func=rect;x=20;y=0;width=100;height=40;bc=#99FFFF;pw=0;"
  shape[3] = "func=ell;x=100;y=0;width=40;height=40;bc=#99FFFF;pw=0;"
  shape[4] = "func=text;x=40;y=8;text=START;fs=20;fn=Trebuchet MS;fb=False;fi=False;"
  shape[5] = "func=line;x=68;y=40;x1=0;y1=0;x2=0;y2=30;pc=#666666;pw=2;"
  shape[6] = "func=rect;x=0;y=70;width=140;height=50;bc=#99FFFF;pw=0;"
  shape[7] = "func=text;x=28;y=84;text=PROCESS;fs=20;fn=Trebuchet MS;fb=False;fi=False;"
  shape[8] = "func=line;x=68;y=120;x1=0;y1=0;x2=0;y2=30;pc=#666666;pw=2;"
  shape[9] = "func=tri;x=-2;y=147;x1=70;y1=0;x2=0;y2=27;x3=140;y3=27;bc=#99FFFF;pw=0;"
  shape[10] = "func=tri;x=-2;y=174;x1=70;y1=0;x2=0;y2=27;x3=140;y3=27;angle=180;bc=#99FFFF;pw=0;"
  shape[11] = "func=text;x=40;y=161;text=LOOP?;fs=20;fn=Trebuchet MS;fb=False;fi=False;"
  shape[12] = "func=text;x=-40;y=176;text=YES;fs=20;fn=Trebuchet MS;fb=False;fi=False;"
  shape[13] = "func=text;x=80;y=198;text=NO;fs=20;fn=Trebuchet MS;fb=False;fi=False;"
  shape[14] = "func=line;x=68;y=200;x1=0;y1=0;x2=0;y2=30;pc=#666666;pw=2;"
  shape[15] = "func=ell;x=0;y=230;width=40;height=40;bc=#99FFFF;pw=0;"
  shape[16] = "func=rect;x=20;y=230;width=100;height=40;bc=#99FFFF;pw=0;"
  shape[17] = "func=ell;x=100;y=230;width=40;height=40;bc=#99FFFF;pw=0;"
  shape[18] = "func=text;x=50;y=238;text=END;fs=20;fn=Trebuchet MS;fb=False;fi=False;"
  shape[19] = "func=line;x=-40;y=55;x1=0;y1=0;x2=0;y2=120;pc=#666666;pw=2;"
  shape[20] = "func=line;x=-40;y=55;x1=0;y1=0;x2=109;y2=0;pc=#666666;pw=2;"
  shape[21] = "func=line;x=-40;y=174;x1=0;y1=0;x2=40;y2=0;pc=#666666;pw=2;"
  shape[22] = "func=line;x=68;y=55;x1=0;y1=0;x2=-10;y2=-5;pc=#666666;pw=2;"
  shape[23] = "func=line;x=68;y=55;x1=0;y1=0;x2=-10;y2=5;pc=#666666;pw=2;"
EndSub
  
Sub Sprite_Add
  ' Sprite | add shapes to a sprite
  ' param name - sprite name
  ' param shX, shY - origin of shape array
  ' param scale - to resize 
  ' param shape[] - shape array
  ' param nSprite - number of sprite
  ' return nSprite - updated number of sprite
  ' return sprite[] - sprite array
  Stack.PushValue("local", i)
  Stack.PushValue("local", x)
  Stack.PushValue("local", y)
  nSprite = nSprite + 1
  spr = ""
  spr["name"] = name
  spr["x"] = shX
  spr["y"] = shY
  spr["angle"] = 0
  spr["dir"] = 1
  Shapes_CalcWidthAndHeight()
  If scale = "" Then
    scale = 1
  EndIf
  s = scale
  spr["scale"] = s
  spr["width"] = shWidth
  spr["height"] = shHeight
  spr["cx"] = shWidth / 2
  spr["cy"] = shHeight / 2
  For i = 1 To Array.GetItemCount(shape)
    shp = shape[i]
    GraphicsWindow.PenWidth = shp["pw"] * s
    If shp["pw"] > 0 Then
      GraphicsWindow.PenColor = shp["pc"]
    EndIf
    If Text.IsSubText("rect|ell|tri|text|btn", shp["func"]) Then
      GraphicsWindow.BrushColor = shp["bc"]
    EndIf
    If Text.IsSubText("text|btn", shp["func"]) Then
      If silverlight Then
        fs = Math.Floor(shp["fs"] * 0.9)
      Else
        fs = shp["fs"]
      EndIf
      GraphicsWindow.FontSize = fs * s
      GraphicsWindow.FontName = shp["fn"]
      If shp["fb"] = "False" Then
        GraphicsWindow.FontBold = "False"
      Else
        GraphicsWindow.FontBold = "True"
      EndIf
    EndIf
    If shp["func"] = "rect" Then
      shp["obj"] = Shapes.AddRectangle(shp["width"] * s, shp["height"] * s)
    ElseIf shp["func"] = "ell" Then
      shp["obj"] = Shapes.AddEllipse(shp["width"] * s, shp["height"] * s)
    ElseIf shp["func"] = "tri" Then
      shp["obj"] = Shapes.AddTriangle(shp["x1"] * s, shp["y1"] * s, shp["x2"] * s, shp["y2"] * s, shp["x3"] * s, shp["y3"] * s)
    ElseIf shp["func"] = "line" Then
      shp["obj"] = Shapes.AddLine(shp["x1"] * s, shp["y1"] * s, shp["x2"] * s, shp["y2"] * s)
    ElseIf shp["func"] = "text" Then
      shp["obj"] = Shapes.AddText(shp["text"])
    EndIf
    x = shp["x"]
    y = shp["y"]
    shp["rx"] = x
    shp["ry"] = y
    If sbd And (shp["func"] = "line") Then
      shp["wx"] = x
      shp["wy"] = y
    ElseIf silverlight And Text.IsSubText("tri|line", shp["func"]) Then
      _alpha = Math.GetRadians(shp["angle"])
      SB_RotateWorkaround()
      shp["wx"] = x
      shp["wy"] = y
    EndIf
    If shp["func"] = "btn" Then
      shp["obj"] = Controls.AddButton(shp["caption"], shX + x * s, shY + y * s)
    Else
      Shapes.Move(shp["obj"], shX + x * s, shY + y * s)
    EndIf
    If Text.IsSubText("rect|ell|tri|text", shp["func"]) And (shp["angle"] <> 0) And (shp["angle"] <> "") Then
      Shapes.Rotate(shp["obj"], shp["angle"])
    EndIf
    shape[i] = shp
  EndFor
  spr["shape"] = shape
  sprite[nSprite] = spr
  y = Stack.PopValue("local")
  x = Stack.PopValue("local")
  i = Stack.PopValue("local")
EndSub
